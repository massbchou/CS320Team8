"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/python-shell";
exports.ids = ["vendor-chunks/python-shell"];
exports.modules = {

/***/ "(rsc)/./node_modules/python-shell/index.js":
/*!********************************************!*\
  !*** ./node_modules/python-shell/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PythonShell = exports.NewlineTransformer = exports.PythonShellErrorWithLogs = exports.PythonShellError = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\nconst os_1 = __webpack_require__(/*! os */ \"os\");\nconst path_1 = __webpack_require__(/*! path */ \"path\");\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nfunction toArray(source) {\n    if (typeof source === \"undefined\" || source === null) {\n        return [];\n    } else if (!Array.isArray(source)) {\n        return [\n            source\n        ];\n    }\n    return source;\n}\n/**\r\n * adds arguments as properties to obj\r\n */ function extend(obj, ...args) {\n    Array.prototype.slice.call(arguments, 1).forEach(function(source) {\n        if (source) {\n            for(let key in source){\n                obj[key] = source[key];\n            }\n        }\n    });\n    return obj;\n}\n/**\r\n * gets a random int from 0-10000000000\r\n */ function getRandomInt() {\n    return Math.floor(Math.random() * 10000000000);\n}\nconst execPromise = (0, util_1.promisify)(child_process_1.exec);\nclass PythonShellError extends Error {\n}\nexports.PythonShellError = PythonShellError;\nclass PythonShellErrorWithLogs extends PythonShellError {\n}\nexports.PythonShellErrorWithLogs = PythonShellErrorWithLogs;\n/**\r\n * Takes in a string stream and emits batches seperated by newlines\r\n */ class NewlineTransformer extends stream_1.Transform {\n    _transform(chunk, encoding, callback) {\n        let data = chunk.toString();\n        if (this._lastLineData) data = this._lastLineData + data;\n        const lines = data.split(os_1.EOL);\n        this._lastLineData = lines.pop();\n        //@ts-ignore this works, node ignores the encoding if it's a number\n        lines.forEach(this.push.bind(this));\n        callback();\n    }\n    _flush(done) {\n        if (this._lastLineData) this.push(this._lastLineData);\n        this._lastLineData = null;\n        done();\n    }\n}\nexports.NewlineTransformer = NewlineTransformer;\n/**\r\n * An interactive Python shell exchanging data through stdio\r\n * @param {string} script    The python script to execute\r\n * @param {object} [options] The launch options (also passed to child_process.spawn)\r\n * @param [stdoutSplitter] Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n * @param [stderrSplitter] Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n * @constructor\r\n */ class PythonShell extends events_1.EventEmitter {\n    /**\r\n     * spawns a python process\r\n     * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified\r\n     * @param options\r\n     * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n     * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n     */ constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null){\n        super();\n        /**\r\n         * returns either pythonshell func (if val string) or custom func (if val Function)\r\n         */ function resolve(type, val) {\n            if (typeof val === \"string\") {\n                // use a built-in function using its name\n                return PythonShell[type][val];\n            } else if (typeof val === \"function\") {\n                // use a custom function\n                return val;\n            }\n        }\n        if (scriptPath.trim().length == 0) throw Error(\"scriptPath cannot be empty! You must give a script for python to run\");\n        let self = this;\n        let errorData = \"\";\n        events_1.EventEmitter.call(this);\n        options = extend({}, PythonShell.defaultOptions, options);\n        let pythonPath;\n        if (!options.pythonPath) {\n            pythonPath = PythonShell.defaultPythonPath;\n        } else pythonPath = options.pythonPath;\n        let pythonOptions = toArray(options.pythonOptions);\n        let scriptArgs = toArray(options.args);\n        this.scriptPath = (0, path_1.join)(options.scriptPath || \"\", scriptPath);\n        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);\n        this.mode = options.mode || \"text\";\n        this.formatter = resolve(\"format\", options.formatter || this.mode);\n        this.parser = resolve(\"parse\", options.parser || this.mode);\n        // We don't expect users to ever format stderr as JSON so we default to text mode\n        this.stderrParser = resolve(\"parse\", options.stderrParser || \"text\");\n        this.terminated = false;\n        this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);\n        [\n            \"stdout\",\n            \"stdin\",\n            \"stderr\"\n        ].forEach(function(name) {\n            self[name] = self.childProcess[name];\n            self.parser && self[name] && self[name].setEncoding(options.encoding || \"utf8\");\n        });\n        // Node buffers stdout&stderr in batches regardless of newline placement\n        // This is troublesome if you want to recieve distinct individual messages\n        // for example JSON parsing breaks if it recieves partial JSON\n        // so we use newlineTransformer to emit each batch seperated by newline\n        if (this.parser && this.stdout) {\n            if (!stdoutSplitter) stdoutSplitter = new NewlineTransformer();\n            // note that setting the encoding turns the chunk into a string\n            stdoutSplitter.setEncoding(options.encoding || \"utf8\");\n            this.stdout.pipe(stdoutSplitter).on(\"data\", (chunk)=>{\n                this.emit(\"message\", self.parser(chunk));\n            });\n        }\n        // listen to stderr and emit errors for incoming data\n        if (this.stderrParser && this.stderr) {\n            if (!stderrSplitter) stderrSplitter = new NewlineTransformer();\n            // note that setting the encoding turns the chunk into a string\n            stderrSplitter.setEncoding(options.encoding || \"utf8\");\n            this.stderr.pipe(stderrSplitter).on(\"data\", (chunk)=>{\n                this.emit(\"stderr\", self.stderrParser(chunk));\n            });\n        }\n        if (this.stderr) {\n            this.stderr.on(\"data\", function(data) {\n                errorData += \"\" + data;\n            });\n            this.stderr.on(\"end\", function() {\n                self.stderrHasEnded = true;\n                terminateIfNeeded();\n            });\n        } else {\n            self.stderrHasEnded = true;\n        }\n        if (this.stdout) {\n            this.stdout.on(\"end\", function() {\n                self.stdoutHasEnded = true;\n                terminateIfNeeded();\n            });\n        } else {\n            self.stdoutHasEnded = true;\n        }\n        this.childProcess.on(\"error\", function(err) {\n            self.emit(\"error\", err);\n        });\n        this.childProcess.on(\"exit\", function(code, signal) {\n            self.exitCode = code;\n            self.exitSignal = signal;\n            terminateIfNeeded();\n        });\n        function terminateIfNeeded() {\n            if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null) return;\n            let err;\n            if (self.exitCode && self.exitCode !== 0) {\n                if (errorData) {\n                    err = self.parseError(errorData);\n                } else {\n                    err = new PythonShellError(\"process exited with code \" + self.exitCode);\n                }\n                err = extend(err, {\n                    executable: pythonPath,\n                    options: pythonOptions.length ? pythonOptions : null,\n                    script: self.scriptPath,\n                    args: scriptArgs.length ? scriptArgs : null,\n                    exitCode: self.exitCode\n                });\n                // do not emit error if only a callback is used\n                if (self.listeners(\"pythonError\").length || !self._endCallback) {\n                    self.emit(\"pythonError\", err);\n                }\n            }\n            self.terminated = true;\n            self.emit(\"close\");\n            self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);\n        }\n        ;\n    }\n    /**\r\n     * checks syntax without executing code\r\n     * @returns rejects promise w/ string error output if syntax failure\r\n     */ static checkSyntax(code) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const randomInt = getRandomInt();\n            const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;\n            const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);\n            return writeFilePromise(filePath, code).then(()=>{\n                return this.checkSyntaxFile(filePath);\n            });\n        });\n    }\n    static getPythonPath() {\n        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;\n    }\n    /**\r\n     * checks syntax without executing code\r\n     * @returns {Promise} rejects w/ stderr if syntax failure\r\n     */ static checkSyntaxFile(filePath) {\n        return __awaiter(this, void 0, void 0, function*() {\n            const pythonPath = this.getPythonPath();\n            let compileCommand = `${pythonPath} -m py_compile ${filePath}`;\n            return execPromise(compileCommand);\n        });\n    }\n    /**\r\n     * Runs a Python script and returns collected messages as a promise.\r\n     * If the promise is rejected, the err will probably be of type PythonShellErrorWithLogs\r\n     * @param scriptPath   The path to the script to execute\r\n     * @param options  The execution options\r\n     */ static run(scriptPath, options) {\n        return new Promise((resolve, reject)=>{\n            let pyshell = new PythonShell(scriptPath, options);\n            let output = [];\n            pyshell.on(\"message\", function(message) {\n                output.push(message);\n            }).end(function(err) {\n                if (err) {\n                    err.logs = output;\n                    reject(err);\n                } else resolve(output);\n            });\n        });\n    }\n    /**\r\n     * Runs the inputted string of python code and returns collected messages as a promise. DO NOT ALLOW UNTRUSTED USER INPUT HERE!\r\n     * @param code   The python code to execute\r\n     * @param options  The execution options\r\n     * @return a promise with the output from the python script\r\n     */ static runString(code, options) {\n        // put code in temp file\n        const randomInt = getRandomInt();\n        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;\n        (0, fs_1.writeFileSync)(filePath, code);\n        return PythonShell.run(filePath, options);\n    }\n    static getVersion(pythonPath) {\n        if (!pythonPath) pythonPath = this.getPythonPath();\n        return execPromise(pythonPath + \" --version\");\n    }\n    static getVersionSync(pythonPath) {\n        if (!pythonPath) pythonPath = this.getPythonPath();\n        return (0, child_process_1.execSync)(pythonPath + \" --version\").toString();\n    }\n    /**\r\n     * Parses an error thrown from the Python process through stderr\r\n     * @param  {string|Buffer} data The stderr contents to parse\r\n     * @return {Error} The parsed error with extended stack trace when traceback is available\r\n     */ parseError(data) {\n        let text = \"\" + data;\n        let error;\n        if (/^Traceback/.test(text)) {\n            // traceback data is available\n            let lines = text.trim().split(os_1.EOL);\n            let exception = lines.pop();\n            error = new PythonShellError(exception);\n            error.traceback = data;\n            // extend stack trace\n            error.stack += os_1.EOL + \"    ----- Python Traceback -----\" + os_1.EOL + \"  \";\n            error.stack += lines.slice(1).join(os_1.EOL + \"  \");\n        } else {\n            // otherwise, create a simpler error with stderr contents\n            error = new PythonShellError(text);\n        }\n        return error;\n    }\n    /**\r\n     * Sends a message to the Python shell through stdin\r\n     * Override this method to format data to be sent to the Python process\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */ send(message) {\n        if (!this.stdin) throw new Error(\"stdin not open for writing\");\n        let data = this.formatter ? this.formatter(message) : message;\n        if (this.mode !== \"binary\") data += os_1.EOL;\n        this.stdin.write(data);\n        return this;\n    }\n    /**\r\n     * Closes the stdin stream. Unless python is listening for stdin in a loop\r\n     * this should cause the process to finish its work and close.\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */ end(callback) {\n        if (this.childProcess.stdin) {\n            this.childProcess.stdin.end();\n        }\n        this._endCallback = callback;\n        return this;\n    }\n    /**\r\n     * Sends a kill signal to the process\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */ kill(signal) {\n        this.terminated = this.childProcess.kill(signal);\n        return this;\n    }\n    /**\r\n     * Alias for kill.\r\n     * @deprecated\r\n     */ terminate(signal) {\n        // todo: remove this next breaking release\n        return this.kill(signal);\n    }\n}\nexports.PythonShell = PythonShell;\n// starting 2020 python2 is deprecated so we choose 3 as default\nPythonShell.defaultPythonPath = process.platform != \"win32\" ? \"python3\" : \"python\";\nPythonShell.defaultOptions = {}; //allow global overrides for options\n// built-in formatters\nPythonShell.format = {\n    text: function toText(data) {\n        if (!data) return \"\";\n        else if (typeof data !== \"string\") return data.toString();\n        return data;\n    },\n    json: function toJson(data) {\n        return JSON.stringify(data);\n    }\n};\n//built-in parsers\nPythonShell.parse = {\n    text: function asText(data) {\n        return data;\n    },\n    json: function asJson(data) {\n        return JSON.parse(data);\n    }\n};\n; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/python-shell/index.js\n");

/***/ })

};
;