import Image from 'next/image';
import Feature from './feature.js';
import background from './images/background.png'

let topPhrases;
// Create global topPhrases variable

/*
formatInput takes in an array of post objects, removes all fake entries and embedded images, 
concatenates the resulting array into a single string, and removes all newlines, and returns the result
*/
function formatInput(arr){
  arr = arr.filter((x) => !(x.body.substring(0, 3) === 'zzz'));
  // Filter out all fake entries that start with 'zzz'

  arr.forEach(function(x){
    if(x.body.indexOf('![') >= 0){
      let start = Math.max(x.body.lastIndexOf('.png)'), x.body.lastIndexOf('.jpg)')) + 5;
      x.body = x.body.substring(0, x.body.indexOf('![')) + x.body.substring(start);
    }
  });
  // Remove all embedded images
  
  let inputText = '';

  for(let i = 0; i < arr.length; i++){
    inputText += arr[i].title + ' ' + arr[i].body + ' ';
  }
  // Generate concatenation of all remaining title and body texts

  inputText = inputText.replaceAll('\n', ' ');
  // Remove all newlines

  return inputText;
}

/*
extractKeywords takes an input text string, spawns a python process (keyword_extractor.py),
and updates the global variable topPhrases to the list generated by the NLP keyword extraction algorithm
*/
async function extractKeywords(inputText){
  const { PythonShell } = require('python-shell');
  await PythonShell.run('./app/keyword_extractor.py', {mode: 'json', pythonPath: 'python', args: [inputText]}).then(msg => {
    topPhrases = msg[0];
  });
  // Spawn Python process, pass it the text
  // When the output from the script is receieved, capture it
}

/*
generateCache takes a mongoDB cache collection object, a post collection object, and a collection date string
it generates a date string to use in querying the database for posts made within MAX_DAYS_OLD days of the collection date,
spawns a python process that takes in the filtered, formatted input string generated by formatInput
and then adds an object to the cache collection that stores the topPhrases with the corresponding collection date
*/
async function generateCache(cacheCollection, postCollection, collectionDate){

  const MAX_DAYS_OLD = 15;
  let comparisonDate = new Date(new Date(collectionDate).getTime() - (1000 * 60 * 60 * 24 * MAX_DAYS_OLD)).toISOString();
  // Create a new date string that represents a date MAX_DAYS_OLD days in the past in relation to the collection date

  let cursor = postCollection.find({publishedAt: {$gt: comparisonDate}});
  // Finds all posts made within the past MAX_DAYS_OLD days in relation to the collection date

  let arr = await cursor.toArray();
  // Turn cursor into an array of post objects

  await extractKeywords(formatInput(arr));
  // Extract keywords from the formatted input

  await cacheCollection.insertOne({collectionDate: collectionDate, topPhrases: topPhrases});
  // Insert the generated keywords into the cache database
}

export default async function Home() {

  const { MongoClient } = require('mongodb');
  const uri = 'mongodb+srv://team8s:rattigan320fa23@campuswire.x730pf7.mongodb.net/?retryWrites=true&w=majority';
  const client = new MongoClient(uri);
  // Set up MongoClient connection class

  try{
    await client.connect();
    // Connect to cluster

    let collectionDate = '2022-12-15';
    // Set collection date

    let cacheCollection = client.db('caching').collection('trending topics');
    let cache = await cacheCollection.findOne({collectionDate: collectionDate});
    // Try to find the cache entry with the corresponding collectionDate

    if(cache === null){ // If the entry does not exist, generate it
      let postCollection = client.db('posts').collection(collectionDate);
      await generateCache(cacheCollection, postCollection, collectionDate);
    }else{ // If the entry does exist, then just pull the keywords from the database
      topPhrases = cache.topPhrases;
    }
  } catch(e) {
    console.error(e);
  } finally {
    await client.close();
  }
  
  return (
    <main style={{backgroundImage: `url(${background.src})`, backgroundSize: 'cover', backgroundRepeat: 'no-repeat', width: '100%', height:'100%'}}>
      <div style={{display:'flex', justifyContent:'center', alignItems:'center'}}>
        <Image src='/images/icon.png' width={90} height={90} quality={100} style={{margin:'10px'}} unoptimized/>
        <span style={{fontFamily:'Young Serif', textAlign:'center', fontSize:'30px'}}>Campuswire Analytics</span>
      </div>
      <div style={{display:'flex', justifyContent:'center', alignItems:'center', margin: '10px'}}>
        <Feature linkTo='trending-topics' title='Trending Topics' content={topPhrases}></Feature>
        <Feature linkTo='top-posts' title='Top Posts' content={['Post #1', 'Post #2', 'Post #3', 'Post #4', 'Post #5']}></Feature>
        <Feature linkTo='most-active-users' title='Most Active Users' content={['User #1', 'User #2', 'User #3', 'User #4', 'User #5']}></Feature>
      </div>
    </main>
  )
}

 module.exports = formatInput
 module.exports = extractKeywords
 module.exports = generateCache